/*

This file is part of PrepDelRels.

Copyright 2017 Michael Reichert <sourcecode@michreichert.de> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include "handler_pass2.hpp"

HandlerPass2::HandlerPass2(USet& node_ids, USet& way_ids, USet& rel_ids, osmium::TagsFilter& filter) :
    m_node_ids(node_ids),
    m_way_ids(way_ids),
    m_rel_ids(rel_ids),
    m_filter(filter) {}


void HandlerPass2::node(const osmium::Node& node) {
    if (has_important_tags(node.tags())) {
        m_node_ids.erase(node.id());
    }
}

void HandlerPass2::way(const osmium::Way& way) {
    if (has_important_tags(way.tags())) {
        m_way_ids.erase(way.id());
        for (const osmium::NodeRef& nd : way.nodes()) {
            m_node_ids.erase(nd.ref());
        }
    }
}

void HandlerPass2::relation(const osmium::Relation& relation) {
    if (has_important_tags(relation.tags()) || !is_election_boundary(relation.tags())) {
        m_rel_ids.erase(relation.id());
        for (const osmium::RelationMember& member : relation.members()) {
            switch (member.type()) {
            case osmium::item_type::node :
                m_node_ids.erase(member.ref());
                break;
            case osmium::item_type::way :
                m_way_ids.erase(member.ref());
                break;
            case osmium::item_type::relation :
                m_rel_ids.erase(member.ref());
                break;
            default:
                break;
            }
        }
    }
}

bool HandlerPass2::is_a_x_key_key(const char* key, const char* whitelisted_base) {
    const char* location = strstr(key, whitelisted_base);
    const size_t length_white = strlen(whitelisted_base);
    const size_t length = strlen(key);
    if (!location) {
        return false;
    }
    if ((location == key || *(location - 1) == ':' || *(location - 1) == '_')
            && ((location + length_white) == (key + length) || *(location + length_white) == ':' || *(location + length_white) == '_')) {
        return true;
    }
    return false;
}

bool HandlerPass2::has_important_tags(const osmium::TagList& tags) {
    for (const osmium::Tag& t : tags) {
        if (!strcmp(t.key(), "building")) {
            return true;
        } else if (!strcmp(t.key(), "landuse")) {
            return true;
        } else if (!strcmp(t.key(), "highway")) {
            return true;
        } else if (!strcmp(t.key(), "railway")) {
            return true;
        } else if (!strcmp(t.key(), "amenity")) {
            return true;
        } else if (!strcmp(t.key(), "shop")) {
            return true;
        } else if (!strcmp(t.key(), "natural")) {
            return true;
        } else if (!strcmp(t.key(), "waterway")) {
            return true;
        } else if (!strcmp(t.key(), "power")) {
            return true;
        } else if (!strcmp(t.key(), "barrier")) {
            return true;
        } else if (!strcmp(t.key(), "leisure")) {
            return true;
        } else if (!strcmp(t.key(), "man_made")) {
            return true;
        } else if (!strcmp(t.key(), "tourism")) {
            return true;
        } /*else if (!strcmp(t.key(), "boundary")) {
            return true;
        }*/ else if (!strcmp(t.key(), "public_transport")) {
            return true;
        } else if (!strcmp(t.key(), "sport")) {
            return true;
        } else if (!strcmp(t.key(), "emergency")) {
            return true;
        } else if (!strcmp(t.key(), "historic")) {
            return true;
        } else if (!strcmp(t.key(), "route")) {
            return true;
        } else if (!strcmp(t.key(), "aeroway")) {
            return true;
        } else if (!strcmp(t.key(), "place")) {
            return true;
        } else if (!strcmp(t.key(), "craft")) {
            return true;
        } else if (!strcmp(t.key(), "entrance")) {
            return true;
        } else if (!strcmp(t.key(), "playground")) {
            return true;
        } else if (!strcmp(t.key(), "aerialway")) {
            return true;
        } else if (!strcmp(t.key(), "healthcare")) {
            return true;
        } else if (!strcmp(t.key(), "military")) {
            return true;
        } else if (!strcmp(t.key(), "building:part")) {
            return true;
        } else if (!strcmp(t.key(), "training")) {
            return true;
        } else if (!strcmp(t.key(), "traffic_sign")) {
            return true;
        } else if (!strcmp(t.key(), "xmas:feature")) {
            return true;
        } else if (!strcmp(t.key(), "seamark:type")) {
            return true;
        } else if (!strcmp(t.key(), "waterway:sign")) {
            return true;
        } else if (!strcmp(t.key(), "university")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "historic")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "razed")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "demolished")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "abandoned")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "disused")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "construction")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "proposed")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "temporary")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "TMC")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "pipeline")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "club")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "golf")) {
            return true;
        } else if (is_a_x_key_key(t.key(), "junction")) {
            return true;
        } else if (!strcmp(t.key(), "office") && (strcmp(t.value(), "yes"))) {
            // office=yes is no real feature tag, "yes" is is a value for lazy users, newbies and SEO spammers.
            return true;
        }
    }
    return false;
}

bool HandlerPass2::is_election_boundary(const osmium::TagList& tags) {
    return osmium::tags::match_any_of(tags, m_filter);
}
