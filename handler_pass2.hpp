#ifndef HANDLER_PASS2_HPP_
#define HANDLER_PASS2_HPP_

/*

This file is part of PrepDelRels.

Copyright 2017 Michael Reichert <sourcecode@michreichert.de> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <unordered_set>
#include <osmium/handler.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/osm/relation.hpp>

using USet = std::unordered_set<osmium::object_id_type>;

class HandlerPass2 : public osmium::handler::Handler {
    USet& m_node_ids;
    USet& m_way_ids;
    USet& m_rel_ids;

public:
    HandlerPass2(USet& node_ids, USet& way_ids, USet& relation_ids);

    void node(const osmium::Node& node);

    void way(const osmium::Way& way);

    void relation(const osmium::Relation& relation);

    /**
     * Check if a key is a whitelisted key, e.g. "name", "short_name", "name:ru", description, description:en, comment, â€¦.
     *
     * The substring name must be
     * * located at the beginning or preceeded by a colon or underscore
     * * and located at the end or followed by a colon or underscore
     *
     * This method will return wrong results if whitelisted_base occurs twice in key (e.g. named_name=*). But these cases are and the
     * common whitelisted keys name, description, note, comment and fixme don't have such stranges prefixes/suffixes.
     *
     * \param key OSM key to check
     * \param whitelist_base string which should be a substring of key and match certain conditions (see above)
     */
    static bool is_a_x_key_key(const char* key, const char* whitelisted_base);

    /**
     * Check if an object has an important tag.
     *
     * \param tags tags of an OSM object
     */
    static bool has_important_tags(const osmium::TagList& tags);

    /**
     * Check if the tags of an object indicate that it is a election boundary.
     *
     * \param tags tags of an OSM object
     */
    static bool is_election_boundary(const osmium::TagList& tags);
};

#endif /* HANDLER_PASS2_HPP_ */
